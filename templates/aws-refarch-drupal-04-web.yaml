---
AWSTemplateFormatVersion: 2010-09-09

Description: Reference Architecture to host Drupal on AWS - Creates Drupal web Auto Scaling group

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Web Parameters
      Parameters:
        - KeyName
        - WebInstanceType
        - WebAsgMax
        - WebAsgMin
        - WebSecurityGroup
        - WebSubnet0
        - WebSubnet1
        - WebSubnet2
        - PublicAlbTargetGroupArn
        - PublicAlbHostname
        - SslCertificate
    - Label:
        default: Drupal Parameters
      Parameters:
        - Title
        - DomainName
        - Directory
        - AdminUsername
        - AdminPassword
        - AdminEmail
        - Locale
    - Label:
        default: Database Parameters
      Parameters:
        - DatabaseClusterEndpointAddress
        - DatabaseName
        - DatabaseMasterUsername
        - DatabaseMasterPassword
    - Label:
        default: File System Parameters
      Parameters:
        - ElasticFileSystem
    ParameterLabels:
      DatabaseClusterEndpointAddress:
        default: DB Cluster Endpoint Address
      DatabaseMasterUsername:
        default: DB Master Username  
      DatabaseMasterPassword:
        default: DB Master Password
      DatabaseName:
        default: DB Name
      ElasticFileSystem:
        default: EFS File System
      KeyName:
        default: Existing Key Pair
      PublicAlbTargetGroupArn:
        default: Public Alb Target Group Arn
      PublicAlbHostname:
        default: Public Alb Hostname
      SslCertificate:
        default: ACM Cert attached to Public Alb
      WebAsgMax:
        default: Web ASG Max
      WebAsgMin:
        default: Web ASG Min
      WebInstanceType:
        default: Web Instance Type
      WebSecurityGroup:
        default: Web Security Group
      WebSubnet0:
        default: Web Subnet for AZ 0
      WebSubnet1:
        default: Web Subnet for AZ 1
      WebSubnet2:
        default: Web Subnet for AZ 2
      AdminEmail:
        default: Admin Email
      AdminPassword:
        default: Admin Password
      AdminUsername:
        default: Admin Username
      Directory:
        default: Site Directory
      DomainName:
        default: Site Domain
      Locale:
        default: Language Code
      Title:
        default: Site Title

Parameters:

  DatabaseClusterEndpointAddress:
    Description: The RDS cluster endpoint address.
    Type: String
  DatabaseMasterUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master username.
    ConstraintDescription: Must contain only alphanumeric characters and be at least 8 characters.
    MaxLength: 16
    MinLength: 1
    Type: String
  DatabaseMasterPassword:
    AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-
    Description: The Amazon RDS master password.
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
  DatabaseName:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master database name.
    Type: String
  ElasticFileSystem:
    AllowedPattern: ^(fs-)([a-z0-9]{17})$
    Description: The Amazon EFS file system id.
    Type: String
  KeyName:
    AllowedPattern: ^([a-zA-Z0-9 @.`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your bastion & Web instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
  PublicAlbTargetGroupArn:
    Description: The public application load balancer target group arn.
    Type: String
  PublicAlbHostname:
    Description: The hostname of the public ALB http form (e.g. http://abdc-12345-xyz.<region>.elb.amazonaws.com)
    Type: String
  SslCertificate:
    AllowedValues:
      - True
      - False
    Default: False
    Description: Is there an ACM SSL Certificate attached to the Public Alb?
    Type:
      String
  WebAsgMax:
    AllowedPattern: ^((?!0$)[1-2]?[0-9]|30)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 4
    Description: Specifies the maximum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 2
    Description: Specifies the minimum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebInstanceType:
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - m4.large
      - t3.xlarge
      - t3.2xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: t3.large
    Description: The Amazon EC2 instance type for your web instances.
    Type: String
  WebSecurityGroup:
    Description: Select the web security group.
    Type: AWS::EC2::SecurityGroup::Id
  WebSubnet0:
    Description: Select an existing web subnet for AZ 0.
    Type: AWS::EC2::Subnet::Id
  WebSubnet1:
    Description: Select an existing web subnet for AZ 1.
    Type: AWS::EC2::Subnet::Id 
  WebSubnet2:
    Description: Select an existing web subnet for AZ 2.
    Type: AWS::EC2::Subnet::Id
  AdminEmail:
    AllowedPattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
    Description: The Drupal admin email address.
    Type: String
  AdminPassword:
    AllowedPattern: ^([a-zA-Z0-9`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-   
    Description: The Drupal admin password.
    Type: String
    NoEcho: true
  AdminUsername:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9_-])*([a-zA-Z0-9])$
    Description: The Drupal admin username.
    Type: String
  Directory:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9_-])*([a-zA-Z0-9])$
    Description: The Drupal site directory.
    Type: String
  DomainName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Description: '[ Optional ] The main domain name of the Drupal site (e.g. example.com). Leave empty to use the ALB DNS name for the Drupal site.'
    Type: String
  Locale:
    Description: The main language of the Drupal site, as per https://codex.Drupal.org/Installing_Drupal_in_Your_Language. The default is 'en_GB'.
    Type: String
    Default: en_US
  Title:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9 _-]*)([a-zA-Z0-9])$
    Description: The Drupal website title.
    Type: String

Conditions:

  NoSslCertificate:
    !Equals [ False, !Ref SslCertificate ]
  MoreThan2AZ:
    !Or [
      !Equals [ !Ref 'AWS::Region', us-gov-east-1 ],
      !Equals [ !Ref 'AWS::Region', us-gov-west-1 ]
    ]
  NoDomainName:
    !Equals [ '', !Ref DomainName ]

Mappings:

  RegionMap:
    us-gov-west-1:
      AMI: ami-0c7e9eda70bb1f75c
#      CIS_STIG_RHEL9_AMI: ami-026382c84eef5afdf
    us-gov-east-1:
      AMI: ami-0cf1e2e4032ecd87c
#      CIS_STIG_RHEL9_AMI: ami-00f2d27cdd4bf678b

Resources:

  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref WebInstanceRole
  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - arn:aws-us-gov:logs:*:*:*
  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref WebLaunchConfiguration
      MaxSize: !Ref WebAsgMax
      MinSize: !Ref WebAsgMin
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Web ASG / ', !Ref 'AWS::StackName' ] ]
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref PublicAlbTargetGroupArn
      VPCZoneIdentifier:
        !If [
          MoreThan2AZ,
          [ !Ref WebSubnet0, !Ref WebSubnet1, !Ref WebSubnet2 ],
          [ !Ref WebSubnet0, !Ref WebSubnet1 ]
        ]
    CreationPolicy:
      ResourceSignal:
        Count: 0
        Timeout: PT20M
  WebLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            - install_remi_repo
            - install_webserver
            - build_cacheclient
            - build_drupal
            - build_opcache
            - install_cacheclient
            - install_composer
            - install_drupal
            - install_opcache
            - start_webserver
        install_remi_repo:
          files:
            /tmp/install_remi_repo.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  subscription-manager repos --enable codeready-builder-for-rhel-9-$(arch)-rpms
                  dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
                  dnf install -y https://rpms.remirepo.net/enterprise/remi-release-9.rpm
                  dnf -y module enable php:remi-8.1
              mode: 000500
              owner: root
              group: root
          commands:
            install_remi_repo:
              command: ./install_remi_repo.sh
              cwd: /tmp
              ignoreErrors: false
        install_webserver:
          packages:
            yum:
              httpd: []
              mysql: []
              php: []
              php-mysqlnd: []
              php-gd: []
          files:
            /tmp/create_site_conf.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  if [ ! -f /etc/httpd/conf.d/nia-iadrp-coding-portal.conf ]; then
                    touch /etc/httpd/conf.d/nia-iadrp-coding-portal.conf
                    {
                      echo 'ServerName 127.0.0.1:80'
                      echo 'DocumentRoot /var/www/drupal/nia-iadrp-coding-portal/web'
                      echo '<Directory /var/www/drupal/nia-iadrp-coding-portal/web>'
                      echo '  Options Indexes FollowSymLinks'
                      echo '  AllowOverride All'
                      echo '  Require all granted'
                      echo '</Directory>'
                    } >> /etc/httpd/conf.d/nia-iadrp-coding-portal.conf
                  fi
              mode: 000500
              owner: root
              group: root
          commands:
            create_site_conf:
              command: ./create_site_conf.sh
              cwd: /tmp
              ignoreErrors: false
        build_cacheclient:
          packages:
            yum:
              gcc-c++: []
              zlib-devel: []
          files:
            /tmp/install_cacheclient.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  aws s3 cp 's3://aws-refarch-drupal/bits/AmazonElastiCacheClusterClient-PHP81-64bit-libmemcached-1.0.19-openssl1.1.tar.gz' /tmp/. --region ${AWS::Region}
                  tar -xf '/tmp/AmazonElastiCacheClusterClient-PHP81-64bit-libmemcached-1.0.19-openssl1.1.tar.gz'
                  cp '/tmp/amazon-elasticache-cluster-client.so' /usr/lib64/php/modules/
                  if [ ! -f /etc/php.d/50-memcached.ini ]; then
                      touch /etc/php.d/50-memcached.ini
                  fi
                  sed -i 'extension=/usr/lib64/php/modules/amazon-elasticache-cluster-client.so;' /etc/php.d/50-memcached.ini
                  sed -i 'extension=igbinary.so;' /etc/php.d/50-memcached.ini
              mode: 000500
              owner: root
              group: root
        build_opcache:
          packages:
            yum:
              php-opcache: []
          files:
            /tmp/install_opcache.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                
                  # create hidden opcache directory locally & change owner to apache
                  if [ ! -d /var/www/.opcache ]; then                    
                      mkdir -p /var/www/.opcache
                  fi
                
                  # enable opcache in /etc/php.d/10-opcache.ini
                  sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php.d/10-opcache.ini
                  sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php.d/10-opcache.ini
                
                  # download opcache-instanceid.php to verify opcache status
                  if [ ! -f /var/www/drupal/nia-iadrp-coding-portal/web/opcache-instanceid.php ]; then
                      aws s3 cp 's3://aws-refarch-drupal/bits/opcache-instanceid.php' /var/www/drupal/nia-iadrp-coding-portal/web/. --region ${AWS::Region}
                  fi
              mode: 000500
              owner: root
              group: root
        build_drupal:
          packages:
            yum:
              wget: [ ]
          files:
            /tmp/install_drupal.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  
                  # make site directory
                  if [ ! -d /var/www/drupal/nia-iadrp-coding-portal ]; then
                    mkdir -p /var/www/drupal/ && cd /var/www/drupal
                   
                    git clone https://github.com/quotientinc/nia-iadrp-coding-portal.git
                    cd /var/www/drupal/nia-iadrp-coding-portal
            
                    HOME=~/ /usr/local/bin/composer install
                
                    # create settings.php and set db and hash_salt 
                    if [ ! -f /var/www/drupal/nia-iadrp-coding-portal/web/sites/default/settings.php ]; then
                      cp ./web/sites/default/default.settings.php ./web/sites/default/settings.php
                
                      {
                        echo "\$databases['default']['default'] = array ("
                        echo "  'database' => '${DatabaseName}',"
                        echo "  'username' => '${DatabaseMasterUsername}',"
                        echo "  'password' => '${DatabaseMasterPassword}',"
                        echo "  'prefix' => '',"
                        echo "  'host' => '${DatabaseClusterEndpointAddress}',"
                        echo "  'port' => '3306',"
                        echo "  'isolation_level' => 'READ COMMITTED',"
                        echo "  'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',"
                        echo "  'driver' => 'mysql',"
                        echo "  'autoload' => 'core/modules/mysql/src/Driver/Database/mysql/',"
                        echo "  );"
                      } >> ./web/sites/default/settings.php
                
                      HASH_SALT=$(HOME=~/ ./vendor/bin/drush eval "print_r(Drupal\Component\Utility\Crypt::randomBytesBase64(55))")
                      echo "Hash Salt: ${!HASH_SALT}"
                      sed -i "s/^\$settings\['hash_salt'\].*$/\$settings\['hash_salt'\] = '${!HASH_SALT}';/" ./web/sites/default/settings.php
                    fi
                
                    if [ ! -f /var/www/drupal/nia-iadrp-coding-portal/web/opcache-instanceid.php ]; then
                     aws s3 cp 's3://aws-refarch-drupal/bits/opcache-instanceid.php' ./web/. --region ${AWS::Region}
                    fi
                
                    # pull latest db dump and restore it using drush
                    if [ ! -f /var/www/drupal/nia-iadrp-coding-portal/coding-portal_7-25.sql.gz ]; then
                      aws s3 cp 's3://aws-refarch-drupal/drupaldb/coding-portal_7-25.sql.gz' . --region ${AWS::Region}
                      gzip -d coding-portal_7-25.sql.gz
                      mkdir database
                      mv coding-portal_7-25.sql database/database.sql
                      tar -zcvf coding-portal_7-25.tar.gz database
                      cd /var/www/drupal/nia-iadrp-coding-portal/web
                      HOME=~/ /var/www/drupal/nia-iadrp-coding-portal/vendor/bin/drush archive:restore /var/www/drupal/nia-iadrp-coding-portal/coding-portal_7-25.tar.gz --db -vvv -y
                    fi
                
                    # set permissions of drupal site directories
                    chown -R apache:apache /var/www/drupal/nia-iadrp-coding-portal/web
                    chmod 444 /var/www/drupal/nia-iadrp-coding-portal/web/sites/default/settings.php
                
                  fi
              mode: 000500
              owner: root
              group: root
        install_composer:
          files:
            /tmp/install_composer.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  curl -sS https://getcomposer.org/installer -o composer-setup.php
                  HOME=~/ php composer-setup.php --install-dir=/usr/local/bin --filename=composer
              mode: 000500
              owner: root
              group: root
          commands:
            install_composer:
              command: ./install_composer.sh
              cwd: /tmp
              ignoreErrors: false
        install_drupal:
          commands:
            install_drupal:
              command: ./install_drupal.sh
              cwd: /tmp
              ignoreErrors: false
        install_cacheclient:
          commands:
            install_cacheclient:
              command: ./install_cacheclient.sh
              cwd: /tmp
              ignoreErrors: false
        install_opcache:
          commands:
            install_opcache:
              command: ./install_opcache.sh
              cwd: /tmp
              ignoreErrors: false
        start_webserver:
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
          commands:
            start_webserver:
              command: systemctl restart httpd
              ignoreErrors: false
    Properties:
      IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      InstanceMonitoring: true
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref WebSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            dnf update -y
            
            # Install and configure CloudWatch Logs
            dnf install -y https://s3.amazonaws.com/amazoncloudwatch-agent/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
            systemctl enable amazon-cloudwatch-agent
            systemctl start amazon-cloudwatch-agent
            
            # Installing the Amazon EFS client
            dnf -y install git rpm-build make
            git clone https://github.com/aws/efs-utils
            cd efs-utils
            make rpm
            dnf -y install build/amazon-efs-utils*rpm
            
            # Mount AWS EFS
            mkdir -p /var/www/drupal
            mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/drupal
            
            # Allow the Apache HTTP server service (httpd) to access and share NFS volumes
            setsebool -P httpd_use_nfs on
          
            # Allow Apache HTTP Server scripts and modules to connect to database servers.
            setsebool -P httpd_can_network_connect_db on
          
            # Install pip
            dnf -y install python3-pip
            
            # Install AWS CLI and CFN Bootstrap
            pip3 install awscli
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            
            /usr/local/bin/cfn-init --configsets deploy_webserver --verbose --stack ${AWS::StackName} --resource WebLaunchConfiguration --region ${AWS::Region}
            sleep 60
            /usr/local/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}
            systemctl restart httpd
            

Outputs:

  Opcachestatus:
    Value: !Join [ '', [ !Ref PublicAlbHostname, '/opcache-instanceid.php' ] ]
